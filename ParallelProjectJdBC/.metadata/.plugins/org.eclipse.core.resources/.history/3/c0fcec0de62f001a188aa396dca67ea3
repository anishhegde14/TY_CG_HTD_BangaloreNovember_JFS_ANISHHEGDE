package com.parallelproject.jdbc.forestrydao;

import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.parallelproject.jdbc.forestrybean.ContractBean;

public class ContractDAOImpl implements ContractorDAO {
	FileReader f;
	Properties prop;

	public ContractDAOImpl() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("Driver Loaded");
			f = new FileReader("db.properties");
			prop = new Properties();
			prop.load(f);

		} catch (ClassNotFoundException | IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public List<ContractBean> getAllContract() {
		List<ContractBean> li = new ArrayList<ContractBean>();
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dburl"), prop);
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(prop.getProperty("query1"))) {
			while (rs.next()) {
				ContractBean contract = new ContractBean();
				System.out.println("hi");
				contract.setContractno(rs.getLong(1));
				contract.setCustomerid(rs.getLong(2));
				contract.setDate(rs.getDate(3).toLocalDate());
				contract.setDay(rs.getString(4));
				contract.setHaulid(rs.getLong(5));
				contract.setProdid(rs.getLong(6));
				contract.setQty(rs.getInt(7));
				li.add(contract);

			}
			return li;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean updateContract(String column_name,int value,int contract_no) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dburl"), prop);
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("query4"))) {
			pstmt.setNString(1, column_name);
			pstmt.setInt(2, value);
			pstmt.setInt(3, contract_no);
			int a = pstmt.executeUpdate();
			if (a != 0) {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}

		return false;
	}
	@Override
	public boolean addContract(ContractBean contract) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dburl"), prop);
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("query3"))) {
			
			pstmt.setLong(1, contract.getContractno());
			pstmt.setLong(2, contract.getCustomerid());
			pstmt.setDate(3,  java.sql.Date.valueOf(contract.getDate()));
			pstmt.setString(4, contract.getDay());
			pstmt.setLong(5, contract.getHaulid());
			pstmt.setLong(6, contract.getProdid());
			pstmt.setInt(7, contract.getQty());
			int a = pstmt.executeUpdate();
			if (a != 0) {
				return true;
			} else {
				return false;
			}

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}

	}

	@Override
	public boolean deleteContract(int contractId) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dburl"), prop);
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("query5"))) {
			pstmt.setInt(1, contractId);
			int a = pstmt.executeUpdate();
			if (a != 0) {
				return true;
			}
			return false;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}

	}

	@Override
	public ContractBean findContract(int contractId) {

		ContractBean contract = new ContractBean();
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dburl"), prop);
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("query2"))) {

			pstmt.setLong(1, contractId);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				contract.setContractno(rs.getLong(1));
				contract.setCustomerid(rs.getLong(2));
				contract.setDate(rs.getDate(3).toLocalDate());
				contract.setDay(rs.getString(4));
				contract.setHaulid(rs.getLong(5));
				contract.setProdid(rs.getLong(6));
				contract.setQty(rs.getInt(7));
			}
			return contract;

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<ContractBean> getAllContractOfCustomer(int customerId) {
		List<ContractBean> li = new ArrayList<ContractBean>();
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dburl"), prop);
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("queryco2")
				)) {
			pstmt.setInt(1, customerId);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				ContractBean contract = new ContractBean();
				contract.setContractno(rs.getLong(1));
				contract.setCustomerid(rs.getLong(2));
				contract.setDate(rs.getDate(3).toLocalDate());
				contract.setDay(rs.getString(4));
				contract.setHaulid(rs.getLong(5));
				contract.setProdid(rs.getLong(6));
				contract.setQty(rs.getInt(7));
				li.add(contract);

			}
			return li;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<ContractBean> getAllContractOfHaulier(int haulierId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean updateContractid(int id) {
		// TODO Auto-generated method stub
		return false;
	}
}